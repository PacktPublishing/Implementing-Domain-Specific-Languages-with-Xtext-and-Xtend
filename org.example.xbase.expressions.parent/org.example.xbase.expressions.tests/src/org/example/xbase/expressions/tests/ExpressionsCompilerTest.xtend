/*
 * generated by Xtext 2.10.0
 */
package org.example.xbase.expressions.tests

import com.google.inject.Inject
import java.io.ByteArrayOutputStream
import java.io.PrintStream
import org.eclipse.xtext.diagnostics.Severity
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.xbase.testing.CompilationTestHelper
import org.eclipse.xtext.xbase.testing.CompilationTestHelper.Result
import org.eclipse.xtext.xbase.testing.TemporaryFolder
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith

import static extension org.junit.Assert.*

@RunWith(XtextRunner)
@InjectWith(ExpressionsInjectorProvider)
class ExpressionsCompilerTest{

	@Rule
	@Inject public TemporaryFolder temporaryFolder

	@Inject extension CompilationTestHelper

	@Test 
	def void testCompilation() {
		'''
		val name = "world"
		val s = "Hello " + name
		'''.compile[
			checkValidationErrors
			'''
				@SuppressWarnings("all")
				public class MyFile {
				  public static void main(final String[] args) {
				    final String name = "world";
				    final String s = ("Hello " + name);
				  }
				}
			'''.toString.assertEquals(singleGeneratedCode)
			compiledClass
		]
	}

	@Test 
	def void testEvalStatementCompilation() {
		'''
		val name = "world"
		eval "Hello " + name
		'''.compile[
			checkValidationErrors
			'''
				@SuppressWarnings("all")
				public class MyFile {
				  public static void main(final String[] args) {
				    final String name = "world";
				    System.out.println(("Hello " + name));
				  }
				}
			'''.toString.assertEquals(singleGeneratedCode)
			compiledClass
		]
	}

	@Test 
	def void testEvalStatementCompilation2() {
		'''
		eval "Hello " + if (args.length > 0) args.get(0) else "world"
		'''.compile[
			checkValidationErrors
			'''
				@SuppressWarnings("all")
				public class MyFile {
				  public static void main(final String[] args) {
				    String _xifexpression = null;
				    int _length = args.length;
				    boolean _greaterThan = (_length > 0);
				    if (_greaterThan) {
				      _xifexpression = args[0];
				    } else {
				      _xifexpression = "world";
				    }
				    String _plus = ("Hello " + _xifexpression);
				    System.out.println(_plus);
				  }
				}
			'''.toString.assertEquals(singleGeneratedCode)
			compiledClass
		]
	}

	@Test 
	def void testEvalStatementCompilation3() {
		'''
		eval 0
		'''.compile[
			checkValidationErrors
			'''
				@SuppressWarnings("all")
				public class MyFile {
				  public static void main(final String[] args) {
				    System.out.println(0);
				  }
				}
			'''.toString.assertEquals(singleGeneratedCode)
			compiledClass
		]
	}

	@Test 
	def void testEvalExpressionCompilation() {
		'''
		val name = eval "Hello "
		'''.compile[
			checkValidationErrors
			'''
				@SuppressWarnings("all")
				public class MyFile {
				  public static void main(final String[] args) {
				    String _eval = "Hello ";
				    final String name = _eval;
				  }
				}
			'''.toString.assertEquals(singleGeneratedCode)
			compiledClass
		]
	}

	@Test 
	def void testEvalExpressionCompilation2() {
		'''
		val name = eval "Hello " + if (args.get(0) != null) args.get(0) else "world"
		'''.compile[
			checkValidationErrors
			'''
				import com.google.common.base.Objects;
				
				@SuppressWarnings("all")
				public class MyFile {
				  public static void main(final String[] args) {
				    String _xifexpression = null;
				    String _get = args[0];
				    boolean _notEquals = (!Objects.equal(_get, null));
				    if (_notEquals) {
				      _xifexpression = args[0];
				    } else {
				      _xifexpression = "world";
				    }
				    String _plus = ("Hello " + _xifexpression);
				    String _eval = _plus;
				    final String name = _eval;
				  }
				}
			'''.toString.assertEquals(singleGeneratedCode)
			compiledClass
		]
	}

	@Test 
	def void testEvalExpressionCompilation3() {
		'''
		val name = (eval " Hello ").trim
		'''.compile[
			checkValidationErrors
			'''
				@SuppressWarnings("all")
				public class MyFile {
				  public static void main(final String[] args) {
				    String _eval = " Hello ";
				    final String name = _eval.trim();
				  }
				}
			'''.toString.assertEquals(singleGeneratedCode)
			compiledClass
		]
	}

	@Test 
	def void testEvalExpressionCompilation4() {
		'''
		val i = eval 0
		'''.compile[
			checkValidationErrors
			'''
				@SuppressWarnings("all")
				public class MyFile {
				  public static void main(final String[] args) {
				    String _eval = "" + 0;
				    final String i = _eval;
				  }
				}
			'''.toString.assertEquals(singleGeneratedCode)
			compiledClass
		]
	}

	@Test 
	def void testEvalExpressionCompilation5() {
		'''
		var i = 0
		while (!(eval args.get(i)).empty) {
			println(args.get(i++))
		}
		'''.compile[
			checkValidationErrors
			'''
				import org.eclipse.xtext.xbase.lib.InputOutput;
				
				@SuppressWarnings("all")
				public class MyFile {
				  public static void main(final String[] args) {
				    int i = 0;
				    while ((!(args[i]).isEmpty())) {
				      int _plusPlus = i++;
				      InputOutput.<String>println(args[_plusPlus]);
				    }
				  }
				}
			'''.toString.assertEquals(singleGeneratedCode)
			compiledClass
		]
	}

	@Test 
	def void testEvalExpressionCompilation6() {
		'''
		var a = newArrayList(0, 1, 2)
		var i = 0
		while (i < a.size && !(eval a.get(i)).empty) {
			println(a.get(i++))
		}
		'''.compile[
			checkValidationErrors
			'''
				import java.util.ArrayList;
				import org.eclipse.xtext.xbase.lib.CollectionLiterals;
				import org.eclipse.xtext.xbase.lib.InputOutput;
				
				@SuppressWarnings("all")
				public class MyFile {
				  public static void main(final String[] args) {
				    ArrayList<Integer> a = CollectionLiterals.<Integer>newArrayList(Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(2));
				    int i = 0;
				    while (((i < a.size()) && (!("" + a.get(i)).isEmpty()))) {
				      int _plusPlus = i++;
				      InputOutput.<Integer>println(a.get(_plusPlus));
				    }
				  }
				}
			'''.toString.assertEquals(singleGeneratedCode)
			compiledClass
		]
	}

	@Test 
	def void testTwoEvalExpressionsCompilation() {
		'''
		val i = eval 0
		val j = eval true
		'''.compile[
			checkValidationErrors
			'''
				@SuppressWarnings("all")
				public class MyFile {
				  public static void main(final String[] args) {
				    String _eval = "" + 0;
				    final String i = _eval;
				    String _eval_1 = "" + true;
				    final String j = _eval_1;
				  }
				}
			'''.toString.assertEquals(singleGeneratedCode)
			compiledClass
		]
	}

	@Test 
	def void testEvalExpressionExecution() {
		'''
		print((eval " Hello ").trim)
		'''.assertExecuteMain("Hello")
	}

	@Test 
	def void testEvalStatementExecution() {
		'''
		eval "Hello " + if (args.length > 0) args.get(0) else "world"
		'''.assertExecuteMain('''
		Hello world
		''')
	}

	@Test 
	def void testEvalStatementExecutionWithArgs() {
		'''
		eval "Hello " + if (args.length > 0) args.get(0) else "world"
		'''.assertExecuteMain('''
		Hello Xtext
		''', #["Xtext"])
	}

	@Test 
	def void testEvalExpressionInWhileExecution() {
		'''
		var i = 0
		while (!(eval args.get(i)).empty) {
			println(args.get(i++))
		}
		'''.assertExecuteMain('''
		1
		2
		''', #["1", "2", "", "3"])
	}

	@Test 
	def void testEvalExpressionInWhileExecution2() {
		'''
		var a = newArrayList(0, 1, 2)
		var i = 0
		while (i < a.size && !(eval a.get(i)).empty) {
			println(a.get(i++))
		}
		'''.assertExecuteMain('''
		0
		1
		2
		''')
	}

	@Test 
	def void testExpressionThatCanBeCompiledToJavaExpression() {
		'''
		var i = 0
		while (!args.get(i).empty) {
			println(args.get(i++))
		}
		'''.compile[
			checkValidationErrors
			'''
				import org.eclipse.xtext.xbase.lib.InputOutput;
				
				@SuppressWarnings("all")
				public class MyFile {
				  public static void main(final String[] args) {
				    int i = 0;
				    while ((!args[i].isEmpty())) {
				      int _plusPlus = i++;
				      InputOutput.<String>println(args[_plusPlus]);
				    }
				  }
				}
			'''.toString.assertEquals(singleGeneratedCode)
			compiledClass
		]
	}

	@Test 
	def void testExpressionWithNoSideEffects() {
		'''
		val i = 0;
		i;
		'''.compile[
			// don't check for validation errors, since the input is
			// actually invalid: the last expression has no side effect
			// checkValidationErrors
			'''
				@SuppressWarnings("all")
				public class MyFile {
				  public static void main(final String[] args) {
				    final int i = 0;
				    /* i; */
				  }
				}
			'''.toString.assertEquals(singleGeneratedCode)
			compiledClass
		]
	}

	private def void checkValidationErrors(Result it) {
		val allErrors = getErrorsAndWarnings.filter[severity == Severity.ERROR]
		if (!allErrors.empty) {
			throw new IllegalStateException(
				"One or more resources contained errors : " +
				allErrors.map[toString].join(", ")
			);
		}
	}

	def private assertExecuteMain(CharSequence file, CharSequence expectedOutput) {
		assertExecuteMain(file, expectedOutput, #[])
	}

	def private assertExecuteMain(CharSequence file, CharSequence expectedOutput, String[] args) {
		val classes = newArrayList()
		file.compile [
			classes += compiledClass
		]
		val clazz = classes.head
		val out = new ByteArrayOutputStream()
		val backup = System.out
		System.setOut(new PrintStream(out))
		try {
			val instance = clazz.getDeclaredConstructor().newInstance
			clazz.declaredMethods.findFirst[name == 'main'] => [
				accessible = true
				invoke(instance, #[args])
			]
		} finally {
			System.setOut(backup)
		}
		assertEquals(expectedOutput.toString, out.toString)
	}

}
