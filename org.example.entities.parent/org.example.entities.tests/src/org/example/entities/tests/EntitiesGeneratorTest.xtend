/*
 * generated by Xtext 2.9.1
 */
package org.example.entities.tests

import com.google.inject.Inject
import org.eclipse.xtext.diagnostics.Severity
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.xbase.lib.util.ReflectExtensions
import org.eclipse.xtext.xbase.testing.CompilationTestHelper
import org.eclipse.xtext.xbase.testing.TemporaryFolder
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith

import static extension org.junit.Assert.*

@RunWith(XtextRunner)
@InjectWith(EntitiesInjectorProvider)
class EntitiesGeneratorTest {

	@Rule
	@Inject public TemporaryFolder temporaryFolder
	@Inject extension CompilationTestHelper
	@Inject extension ReflectExtensions

	@Test
	def void testGeneratedCode() {
		'''
			entity MyEntity {
			  string myAttribute;
			}
		'''.assertCompilesTo(
			'''
				package entities;
				
				public class MyEntity {
					private String myAttribute;
				
					public String getMyAttribute() {
						return myAttribute;
					}
					
					public void setMyAttribute(String _arg) {
						this.myAttribute = _arg;
					}
					
				}
			'''
		)
	}

	@Test
	def void testGeneratedJavaCodeIsValid() {
		'''
			entity MyEntity {
			  string myAttribute;
			}
		'''.compile [
			getCompiledClass
		]
	}

	@Test
	def void testGeneratedJavaCode() {
		'''
			entity E {
			  string myAttribute;
			}
		'''.compile [
			getCompiledClass.newInstance => [
				assertNull(it.invoke("getMyAttribute"))
				it.invoke("setMyAttribute", "value")
				assertEquals("value", it.invoke("getMyAttribute"))
			]
		]
	}

	@Test def void testGeneratedCodeWithTwoEntites() {
		'''
			entity FirstEntity {
			  SecondEntity myAttribute;
			}
			
			entity SecondEntity { }
		'''.compile [
			'''
				package entities;
				
				public class FirstEntity {
					private SecondEntity myAttribute;
				
					public SecondEntity getMyAttribute() {
						return myAttribute;
					}
					
					public void setMyAttribute(SecondEntity _arg) {
						this.myAttribute = _arg;
					}
					
				}
			'''.toString.assertEquals(getGeneratedCode("entities.FirstEntity"))

			'''
				package entities;
				
				public class SecondEntity {
				
				}
			'''.toString.assertEquals(getGeneratedCode("entities.SecondEntity"))
		]
	}

	@Test def void testGeneratedJavaCodeWithTwoClasses() {
		'''
			entity FirstEntity {
			  SecondEntity myAttribute;
			}
			
			entity SecondEntity {
			  string s;
			}
		'''.compile [
			val FirstEntity = getCompiledClass("entities.FirstEntity").newInstance
			val SecondEntity = getCompiledClass("entities.SecondEntity").newInstance
			SecondEntity.invoke("setS", "testvalue")
			FirstEntity.invoke("setMyAttribute", SecondEntity)
			SecondEntity.assertSame(FirstEntity.invoke("getMyAttribute"))
			"testvalue".assertEquals(FirstEntity.invoke("getMyAttribute").invoke("getS"))
		]
	}

	@Test(expected=IllegalStateException)
	def void testInputWithValidationError() {
		'''
			entity MyEntity {
				// missing ;
				string myAttribute
			}
		'''.compile [
			val allErrors = getErrorsAndWarnings.filter[severity == Severity.ERROR]
			if (!allErrors.empty) {
				throw new IllegalStateException(
					"One or more resources contained errors : " +
					allErrors.map[toString].join(", ")
				);
			}
		]
	}

}
