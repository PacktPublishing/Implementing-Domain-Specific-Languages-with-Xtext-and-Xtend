/*
 * generated by Xtext 2.10.0
 */
package org.example.school.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.example.school.school.Person
import org.example.school.school.SchoolModel
import org.junit.Test
import org.junit.runner.RunWith

import static extension org.junit.Assert.*

@RunWith(XtextRunner)
@InjectWith(SchoolInjectorProvider)
class SchoolParsingTest{

	@Inject extension
	ParseHelper<SchoolModel> parseHelper

	@Test 
	def void loadModel() {
		val result = parseHelper.parse('''
			school "A school" {
				student "A student" registrationNum 100
			}
		''')
		assertNotNull(result)
	}

	@Test def void testPersons() {
		'''
		school "A school" {
			student "A student" registrationNum 100
			teacher "A teacher"
			student "A student2" registrationNum 100
			teacher "A teacher2"
		}
		'''.parse.schools.head => [
			teachers.assertPersons("A teacher, A teacher2")
			students.assertPersons("A student, A student2")
		]
	}

	@Test def void testDerivedStatistics() {
		'''
		school "A school" {
			student "A student" registrationNum 100 {
				"A teacher"
			}
			teacher "A teacher"
			student "A student with no teacher" registrationNum 100
			student "Another student with no teacher" registrationNum 100
		}
		'''.parse.schools.head.statistics => [
			3.assertEquals(studentsNumber)
			1.assertEquals(teachersNumber)
			2.assertEquals(studentsWithNoTeacher.size)
		]
	}

	def private assertPersons(Iterable<? extends Person> persons, CharSequence expected) {
		expected.toString.assertEquals(
			persons.map[name].join(", ")
		)
	}
}
