/*
 * generated by Xtext 2.10.0
 */
package org.example.xbase.entities.validation

import com.google.inject.Inject
import java.util.Set
import org.eclipse.xtext.common.types.JvmGenericType
import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.xbase.jvmmodel.IJvmModelAssociations
import org.example.xbase.entities.entities.EntitiesPackage
import org.example.xbase.entities.entities.Entity

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class EntitiesValidator extends AbstractEntitiesValidator {

	protected static val ISSUE_CODE_PREFIX = "org.example.xbase.entities.";

	public static val HIERARCHY_CYCLE = ISSUE_CODE_PREFIX + "HierarchyCycle";

	@Inject extension IJvmModelAssociations

	@Check
	def checkNoCycleInEntityHierarchy(Entity entity) {
		val inferredJavaType = entity.jvmElements.filter(JvmGenericType).head
		if (inferredJavaType.hasCycleInHierarchy(newHashSet())) {
			error("cycle in hierarchy of entity '" + entity.name + "'",
					EntitiesPackage.eINSTANCE.entity_SuperType,
					HIERARCHY_CYCLE)
		}
	}

	def private boolean hasCycleInHierarchy(JvmGenericType t, Set<JvmGenericType> processed) {
		if (processed.contains(t))
			return true
		processed.add(t)
		return t.superTypes.map[type].filter(JvmGenericType).
			exists[hasCycleInHierarchy(processed)]
	}
}
