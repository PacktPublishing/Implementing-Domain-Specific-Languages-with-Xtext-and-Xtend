/*
 * generated by Xtext 2.10.0
 */
package org.example.smalljava.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.example.smalljava.smallJava.SJBlock
import org.example.smalljava.smallJava.SJMethod
import org.example.smalljava.smallJava.SJVariableDeclaration
import org.example.smalljava.smallJava.SmallJavaPackage
import org.example.smalljava.smallJava.SJMemberSelection
import com.google.inject.Inject
import org.example.smalljava.SmallJavaModelUtil
import org.example.smalljava.typing.SmallJavaTypeComputer

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class SmallJavaScopeProvider extends AbstractSmallJavaScopeProvider {

	val epackage = SmallJavaPackage.eINSTANCE
	@Inject extension SmallJavaModelUtil
	@Inject extension SmallJavaTypeComputer

	override getScope(EObject context, EReference reference) {
		if (reference == epackage.SJSymbolRef_Symbol) {
			return scopeForSymbolRef(context)
		} else if (context instanceof SJMemberSelection) {
			return scopeForMemberSelection(context)
		}
		return super.getScope(context, reference)
	}

	def protected IScope scopeForSymbolRef(EObject context) {
		val container = context.eContainer
		return switch (container) {
			SJMethod:
				Scopes.scopeFor(container.params)
			SJBlock:
				Scopes.scopeFor(
					container.statements.takeWhile[it != context].filter(SJVariableDeclaration),
					scopeForSymbolRef(container) // outer scope
				)
			default:
				scopeForSymbolRef(container)
		}
	}

	def protected IScope scopeForMemberSelection(SJMemberSelection sel) {
		val type = sel.receiver.typeFor

		if (type === null || type.isPrimitive)
			return IScope.NULLSCOPE

		val grouped = type.
			classHierarchyMembers.groupBy[it instanceof SJMethod]
		val inheritedMethods = grouped.get(true) ?: emptyList
		val inheritedFields = grouped.get(false) ?: emptyList

		if (sel.methodinvocation) {
			return Scopes.scopeFor(
				type.methods + type.fields,
				Scopes.scopeFor(inheritedMethods + inheritedFields)
			)
		} else {
			return Scopes.scopeFor(
				type.fields + type.methods,
				Scopes.scopeFor(inheritedFields + inheritedMethods)
			)
		}
	}

}
