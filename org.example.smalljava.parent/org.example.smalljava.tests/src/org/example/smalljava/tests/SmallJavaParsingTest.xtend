/*
 * generated by Xtext 2.10.0
 */
package org.example.smalljava.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.example.smalljava.SmallJavaModelUtil
import org.example.smalljava.smallJava.SJAccessLevel
import org.example.smalljava.smallJava.SJAssignment
import org.example.smalljava.smallJava.SJIfStatement
import org.example.smalljava.smallJava.SJMemberSelection
import org.example.smalljava.smallJava.SJNew
import org.example.smalljava.smallJava.SJNull
import org.example.smalljava.smallJava.SJProgram
import org.example.smalljava.smallJava.SJReturn
import org.example.smalljava.smallJava.SJStatement
import org.example.smalljava.smallJava.SJSymbolRef
import org.example.smalljava.smallJava.SJThis
import org.example.smalljava.smallJava.SJVariableDeclaration
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith

import static extension org.junit.Assert.*

@RunWith(XtextRunner)
@InjectWith(SmallJavaInjectorProvider)
class SmallJavaParsingTest {

	@Inject extension ParseHelper<SJProgram> parseHelper
	@Inject extension SmallJavaModelUtil

	@Test 
	def void loadModel() {
		val result = parseHelper.parse('''
			class C {
				
			}
		''')
		Assert.assertNotNull(result)
	}

	@Test def void testThenBlockWithoutStatements() {
		'''
		class C {
			C c;
			C m() {
				if (true) {
					
				}
				return this.c;
			}
		}
		'''.parse => [
			val ifS = (classes.head.methods.head.
				body.statements.head as SJIfStatement)
			ifS.thenBlock.statements.empty.assertTrue
		]
	}

	@Test def void testElse() {
		'''
		class C {
			C c;
			C m() {
				if (true)
					if (false)
						this.c = null;
					else
						this.c = null;
				return this.c;
			}
		}
		'''.parse => [
			val ifS = (classes.head.methods.head.
				body.statements.head as SJIfStatement)
			ifS.elseBlock.assertNull
			// thus the else is associated to the inner if
		]
	}

	@Test def void testElseWithBlock() {
		'''
		class C {
			C c;
			C m() {
				if (true) {
					if (false)
						this.c = null;
				} else
						this.c = null;
				return this.c;
			}
		}
		'''.parse => [
			val ifS = (classes.head.methods.head.
				body.statements.head as SJIfStatement)
			ifS.elseBlock.assertNotNull
			// thus the else is associated to the outer if
		]
	}

	@Test def void testMemberSelectionLeftAssociativity() {
		'''
		class A {
			A m() { return this.m().m(); }
		}
		'''.parse.classes.head.methods.head.
			body.statements.last.
			assertAssociativity("((this.m).m)")
	}

	@Test def void testAssignmentRightAssociativity() {
		'''
		class A {
			A m() {
				A f = null;
				A g = null;
				f = g = null;
			}
		}
		'''.parse.classes.head.methods.head.
			body.statements.last.
			assertAssociativity("(f = (g = null))")
	}

	@Test def void testParameterAndVariable() {
		'''
		class A {
			A m(A p) {
				A v = null;
				return null;
			}
		}
		'''.parse.classes.head.methods.head => [
			params.head.assertNotNull ;
			(body.statements.head instanceof SJVariableDeclaration).assertTrue
		]
	}

	@Test def void testAccessLevel() {
		'''
		class C { } 
		
		class D extends C {
			C c1; // default to private
			public C c2;
			private C c3;
			protected C c4;
		}'''.parse => [
			assertAccessLevel(0, SJAccessLevel.PRIVATE)
			assertAccessLevel(1, SJAccessLevel.PUBLIC)
			assertAccessLevel(2, SJAccessLevel.PRIVATE)
			assertAccessLevel(3, SJAccessLevel.PROTECTED)
		]
	}

	def private assertAssociativity(SJStatement s, CharSequence expected) {
		expected.toString.assertEquals(s.stringRepr)
	}

	def private String stringRepr(SJStatement s) {
		switch (s) {
			SJAssignment: '''(«s.left.stringRepr» = «s.right.stringRepr»)'''
			SJMemberSelection: '''(«s.receiver.stringRepr».«s.member.name»)'''
			SJThis: "this"
			SJNew: '''new «s.type.name»()'''
			SJNull: "null"
			SJSymbolRef: s.symbol.name
			SJReturn: s.expression.stringRepr
		}
	}

	def private assertAccessLevel(SJProgram p, int memberIndex, SJAccessLevel access) {
		access.assertEquals(
			p.classes.last.members.get(memberIndex).access)
	}

}
